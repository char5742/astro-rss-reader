---
import Layout from "~/layouts/Layout.astro";
import Modal from "~/components/feeds/Modal.astro";
import FeedForm from "~/components/feeds/FeedForm.astro";
import CategoryForm from "~/components/feeds/CategoryForm.astro";
import type { Feed, FeedCategory } from "~/types/feed";
import { $feedCategories, $feeds } from "~/store/feeds";
import AddIcon from "~/icons/add.svg";
import EditIcon from "~/icons/edit.svg";
import DeleteIcon from "~/icons/delete.svg";

const feeds = await $feeds.get()
const categories = await $feedCategories.get()

// カテゴリー別のフィード数を計算
const feedCountByCategory: Record<string, number> = {};
categories.forEach((category: FeedCategory) => {
  feedCountByCategory[category.id] = feeds.filter((feed: Feed) => 
    feed.categoryIds.includes(category.id)
  ).length;
});

// 日付をフォーマットする関数
function formatDate(date: Date): string {
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  
  const seconds = Math.floor(diff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) {
    return `${days}日前`;
  } else if (hours > 0) {
    return `${hours}時間前`;
  } else if (minutes > 0) {
    return `${minutes}分前`;
  } else {
    return `${seconds}秒前`;
  }
}

// カテゴリー名を取得する関数
function getCategoryNames(feed: Feed): string[] {
  return feed.categoryIds.map(id => {
    const category = categories.find((c: FeedCategory) => c.id === id);
    return category ? category.name : "";
  }).filter(Boolean);
}
---

<Layout title="フィード管理">
  <div class="page-container">
    <header>
      <h1>フィード管理</h1>
      <div>
        <button id="importOpmlBtn" class="btn secondary">OPMLインポート</button>
        <button id="exportOpmlBtn" class="btn secondary">OPMLエクスポート</button>
      </div>
    </header>

    <section>
      <header>
        <h2>カテゴリー</h2>
        <button id="addCategoryBtn" class="btn icon" aria-label="新規カテゴリー追加">
          <AddIcon />
        </button>
      </header>
      <div class="category-grid">
        {categories.length === 0 ? (
          <p class="empty-message">カテゴリーがありません。新規カテゴリーを追加してください。</p>
        ) : (
          categories.map((category) => (
            <article>
              <header>
                <h3>{category.name}</h3>
                <span>{feedCountByCategory[category.id] || 0}フィード</span>
              </header>
              <div>
                <button class="edit-category-btn btn icon" data-id={category.id} aria-label="カテゴリー編集">
                  <EditIcon fill="currentColor" />
                </button>
                <button class="delete-category-btn btn icon danger" data-id={category.id} aria-label="カテゴリー削除">
                  <DeleteIcon fill="currentColor"/>
                </button>
              </div>
            </article>
          ))
        )}
      </div>
    </section>

    <section>
      <header>
        <h2>フィード一覧</h2>
        <button id="addFeedBtn" class="btn icon" aria-label="新規フィード追加">
          <AddIcon fill="currentColor"/>
        </button>
      </header>
      <div class="feed-list">
        {feeds.length === 0 ? (
          <p class="empty-message">フィードがありません。新規フィードを追加してください。</p>
        ) : (
          feeds.map((feed) => (
            <article>
              <div>
                <h3>{feed.title}</h3>
                <p>{feed.url}</p>
                <div class="tags">
                  {getCategoryNames(feed).map((name) => (
                    <span class="tag">{name}</span>
                  ))}
                </div>
              </div>
              <div class="meta">
                {feed.lastUpdated && (
                  <span>最終更新: {formatDate(new Date(feed.lastUpdated))}</span>
                )}
              </div>
              <div class="actions">
                <button class="edit-feed-btn btn icon" data-id={feed.id} aria-label="フィード編集">
                  <EditIcon fill="currentColor"/>
                </button>
                <button class="delete-feed-btn btn icon danger" data-id={feed.id} aria-label="フィード削除">
                  <DeleteIcon fill="currentColor"/>
                </button>
              </div>
            </article>
          ))
        )}
      </div>
    </section>
  </div>

  <!-- フィード追加/編集モーダル -->
  <Modal id="feedModal" title="フィード追加">
    <FeedForm categories={categories} />
  </Modal>

  <!-- カテゴリー追加/編集モーダル -->
  <Modal id="categoryModal" title="カテゴリー追加">
    <CategoryForm />
  </Modal>

  <!-- OPMLインポートモーダル -->
  <Modal id="importModal" title="OPMLインポート">
    <div class="form-container">
      <div class="form-group">
        <label for="opmlFile">OPMLファイル</label>
        <input type="file" id="opmlFile" accept=".opml,.xml" class="form-control" />
      </div>
      <div class="form-actions">
        <button id="cancelImportBtn" class="btn secondary">キャンセル</button>
        <button id="importBtn" class="btn primary">インポート</button>
      </div>
    </div>
  </Modal>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // モーダル要素
    const feedModal = document.getElementById('feedModal');
    const categoryModal = document.getElementById('categoryModal');
    const importModal = document.getElementById('importModal');
    
    // フィード追加ボタン
    const addFeedBtn = document.getElementById('addFeedBtn');
    addFeedBtn?.addEventListener('click', () => {
      const modalTitle = feedModal?.querySelector('.modal-header h2');
      if (modalTitle) modalTitle.textContent = 'フィード追加';
      
      // フォームをリセット
      const form = document.getElementById('feedForm') as HTMLFormElement;
      form?.reset();
      
      // モーダルを表示
      feedModal?.classList.add('show');
    });
    
    // フィード編集ボタン
    document.querySelectorAll('.edit-feed-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const feedId = (e.currentTarget as HTMLElement).dataset.id;
        if (!feedId) return;
        
        const modalTitle = feedModal?.querySelector('.modal-header h2');
        if (modalTitle) modalTitle.textContent = 'フィード編集';
        
        // APIからフィードデータを取得
        try {
          const response = await fetch(`/api/feeds/${feedId}`);
          if (!response.ok) {
            throw new Error('フィードの取得に失敗しました');
          }
          
          const data = await response.json();
          const feed = data.feed;
          
          // フォームに値を設定
          const form = document.getElementById('feedForm') as HTMLFormElement;
          if (form) {
            const feedIdInput = form.querySelector('[name="feedId"]') as HTMLInputElement;
            const urlInput = form.querySelector('[name="url"]') as HTMLInputElement;
            const titleInput = form.querySelector('[name="title"]') as HTMLInputElement;
            const descriptionInput = form.querySelector('[name="description"]') as HTMLTextAreaElement;
            
            if (feedIdInput) feedIdInput.value = feed.id;
            if (urlInput) urlInput.value = feed.url;
            if (titleInput) titleInput.value = feed.title;
            if (descriptionInput) descriptionInput.value = feed.description || '';
            
            // カテゴリーのチェックボックスを設定
            feed.categoryIds.forEach((categoryId: string) => {
              const checkbox = form.querySelector(`[name="categoryIds"][value="${categoryId}"]`) as HTMLInputElement;
              if (checkbox) checkbox.checked = true;
            });
          }
          
          // モーダルを表示
          feedModal?.classList.add('show');
        } catch (error) {
          console.error('フィード取得エラー:', error);
          alert('フィードの取得に失敗しました');
        }
      });
    });
    
    // フィード削除ボタン
    document.querySelectorAll('.delete-feed-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const feedId = (e.currentTarget as HTMLElement).dataset.id;
        if (!feedId) return;
        
        if (confirm('このフィードを削除してもよろしいですか？')) {
          try {
            const response = await fetch('/api/feeds', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id: feedId }),
            });
            
            if (response.ok) {
              window.location.reload();
            } else {
              const data = await response.json();
              alert(data.error || 'フィードの削除に失敗しました');
            }
          } catch (error) {
            console.error('フィード削除エラー:', error);
            alert('フィードの削除に失敗しました');
          }
        }
      });
    });
    
    // カテゴリー追加ボタン
    const addCategoryBtn = document.getElementById('addCategoryBtn');
    addCategoryBtn?.addEventListener('click', () => {
      const modalTitle = categoryModal?.querySelector('.modal-header h2');
      if (modalTitle) modalTitle.textContent = 'カテゴリー追加';
      
      // フォームをリセット
      const form = document.getElementById('categoryForm') as HTMLFormElement;
      form?.reset();
      
      // モーダルを表示
      categoryModal?.classList.add('show');
    });
    
    // カテゴリー編集ボタン
    document.querySelectorAll('.edit-category-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const categoryId = (e.currentTarget as HTMLElement).dataset.id;
        if (!categoryId) return;
        
        const modalTitle = categoryModal?.querySelector('.modal-header h2');
        if (modalTitle) modalTitle.textContent = 'カテゴリー編集';
        
        // APIからカテゴリーデータを取得
        try {
          const response = await fetch(`/api/categories/${categoryId}`);
          if (!response.ok) {
            throw new Error('カテゴリーの取得に失敗しました');
          }
          
          const data = await response.json();
          const category = data.category;
          
          // フォームに値を設定
          const form = document.getElementById('categoryForm') as HTMLFormElement;
          if (form) {
            const idInput = form.querySelector('[name="id"]') as HTMLInputElement;
            const nameInput = form.querySelector('[name="name"]') as HTMLInputElement;
            
            if (idInput) idInput.value = category.id;
            if (nameInput) nameInput.value = category.name;
          }
          
          // モーダルを表示
          categoryModal?.classList.add('show');
        } catch (error) {
          console.error('カテゴリー取得エラー:', error);
          alert('カテゴリーの取得に失敗しました');
        }
      });
    });
    
    // カテゴリー削除ボタン
    document.querySelectorAll('.delete-category-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const categoryId = (e.currentTarget as HTMLElement).dataset.id;
        if (!categoryId) return;
        
        if (confirm('このカテゴリーを削除してもよろしいですか？このカテゴリーに属するフィードからカテゴリーが削除されます。')) {
          try {
            const response = await fetch('/api/categories', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id: categoryId }),
            });
            
            if (response.ok) {
              window.location.reload();
            } else {
              const data = await response.json();
              alert(data.error || 'カテゴリーの削除に失敗しました');
            }
          } catch (error) {
            console.error('カテゴリー削除エラー:', error);
            alert('カテゴリーの削除に失敗しました');
          }
        }
      });
    });
    
    // OPMLインポートボタン
    const importOpmlBtn = document.getElementById('importOpmlBtn');
    importOpmlBtn?.addEventListener('click', () => {
      importModal?.classList.add('show');
    });
    
    // OPMLエクスポートボタン
    const exportOpmlBtn = document.getElementById('exportOpmlBtn');
    exportOpmlBtn?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/feeds/export');
        if (!response.ok) {
          throw new Error('OPMLのエクスポートに失敗しました');
        }
        
        const opml = await response.text();
        
        // ダウンロードリンクを作成
        const blob = new Blob([opml], { type: 'application/xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'feeds.opml';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } catch (error) {
        console.error('OPMLエクスポートエラー:', error);
        alert('OPMLのエクスポートに失敗しました');
      }
    });
    
    // インポート実行ボタン
    const importBtn = document.getElementById('importBtn');
    importBtn?.addEventListener('click', () => {
      const fileInput = document.getElementById('opmlFile') as HTMLInputElement;
      const file = fileInput?.files?.[0];
      
      if (file) {
        const reader = new FileReader();
        reader.onload = async (e) => {
          const content = e.target?.result as string;
          if (content) {
            try {
              const response = await fetch('/api/feeds/import', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/xml',
                },
                body: content,
              });
              
              if (response.ok) {
                const data = await response.json();
                alert(`${data.count}件のフィードをインポートしました。`);
                importModal?.classList.remove('show');
                window.location.reload();
              } else {
                const data = await response.json();
                alert(data.error || 'OPMLのインポートに失敗しました');
              }
            } catch (error) {
              console.error('OPMLインポートエラー:', error);
              alert('OPMLのインポートに失敗しました');
            }
          }
        };
        reader.readAsText(file);
      } else {
        alert('ファイルを選択してください。');
      }
    });
    
    // インポートキャンセルボタン
    const cancelImportBtn = document.getElementById('cancelImportBtn');
    cancelImportBtn?.addEventListener('click', () => {
      importModal?.classList.remove('show');
    });
  });
</script>

<style>
  .page-container {
    padding: 1rem;

    > header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;

      > div {
        display: flex;
        gap: 0.5rem;
      }
    }
  }

  section {
    > header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
  }

  .category-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem; 
    margin-bottom: 2rem;

    > article {
      background-color: var(--color-card-background);
      border-radius: 8px;
      padding: 1rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      gap: 0.5rem;

      > header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-grow: 1;

        > h3 {
          margin: 0;
        }

        > span {
          font-size: 0.8rem;
          color: var(--color-text-secondary);
        }
      }

      > div {
        display: flex;
        gap: 0.5rem;
        align-self: flex-end;
      }
    }
  }

  .feed-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    > article {
      background-color: var(--color-card-background);
      border-radius: 8px;
      padding: 1rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      display: flex;
      align-items: flex-start;
      gap: 1rem;

      > div:first-of-type {
        flex: 1;

        > h3 {
          margin: 0 0 0.5rem 0;
          font-size: 1.2rem;
        }
        > p {
          margin: 0.5rem 0;
          color: var(--color-text-secondary);
          font-size: 0.9rem;
          word-break: break-all;
        }

        > .tags {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
          margin-top: 0.5rem;

          > .tag {
            background-color: var(--color-accent-light);
            color: var(--color-accent);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
          }
        }
      }

      > .meta {
        font-size: 0.8rem;
        color: var(--color-text-secondary);
        margin: 0;
        padding-top: 0.2rem;
        flex-shrink: 0;
        text-align: right;
      }

      > .actions {
        display: flex;
        gap: 0.5rem;
        flex-shrink: 0;
        padding-top: 0.2rem;
      }
    }
  }

  .empty-message {
    color: var(--color-text-secondary);
    font-style: italic;
    text-align: center;
    padding: 2rem;
  }

  .form-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .form-control {
      padding: 0.5rem;
      border: 1px solid var(--color-border);
      border-radius: 4px;
      font-size: 1rem;
    }

    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
      margin-top: 1rem;
    }
  }

  .btn {
    &.icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      padding: 0;
      border-radius: 50%;
      color: var(--color-text);
      background-color: transparent;
      border: 1px solid var(--color-border);
      vertical-align: middle;

      &:hover {
        background-color: var(--color-background-hover);
      }

      &.danger {
        color: var(--color-danger);

        &:hover {
          background-color: rgba(var(--color-danger-rgb), 0.1);
        }
      }
    }
  }
</style>
