---
import Layout from "~/layouts/Layout.astro";
import Modal from "~/components/feeds/Modal.astro";
import FeedForm from "~/components/feeds/FeedForm.astro";
import CategoryForm from "~/components/feeds/CategoryForm.astro";
import { $feeds, $feedCategories } from "~/store/feeds";
import type { Feed, FeedCategory } from "~/types/feed";

// フィードとカテゴリーを取得
const feeds = $feeds.get();
const categories = $feedCategories.get();

// カテゴリー別のフィード数を計算
const feedCountByCategory: Record<string, number> = {};
categories.forEach(category => {
  feedCountByCategory[category.id] = feeds.filter(feed => 
    feed.categoryIds.includes(category.id)
  ).length;
});

// 日付をフォーマットする関数
function formatDate(date: Date): string {
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  
  const seconds = Math.floor(diff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) {
    return `${days}日前`;
  } else if (hours > 0) {
    return `${hours}時間前`;
  } else if (minutes > 0) {
    return `${minutes}分前`;
  } else {
    return `${seconds}秒前`;
  }
}

// カテゴリー名を取得する関数
function getCategoryNames(feed: Feed): string[] {
  return feed.categoryIds.map(id => {
    const category = categories.find(c => c.id === id);
    return category ? category.name : "";
  }).filter(Boolean);
}
---

<Layout title="フィード管理">
  <div class="container">
    <header class="container-header">
      <h1>フィード管理</h1>
      <div class="container-actions">
        <button id="addFeedBtn" class="btn primary">新規フィード追加</button>
        <button id="importOpmlBtn" class="btn secondary">OPMLインポート</button>
        <button id="exportOpmlBtn" class="btn secondary">OPMLエクスポート</button>
      </div>
    </header>

    <section>
      <div class="section-header">
        <h2>カテゴリー管理</h2>
        <button id="addCategoryBtn" class="btn secondary">新規カテゴリー追加</button>
      </div>
      <div class="container-grid">
        {categories.length === 0 ? (
          <p class="empty-message">カテゴリーがありません。新規カテゴリーを追加してください。</p>
        ) : (
          categories.map((category) => (
            <article class="item-container">
              <div class="item-header">
                <h3>{category.name}</h3>
                <span class="container-meta">{feedCountByCategory[category.id] || 0}フィード</span>
              </div>
              <div class="container-actions">
                <button class="edit-category-btn btn secondary" data-id={category.id}>編集</button>
                <button class="delete-category-btn btn danger" data-id={category.id}>削除</button>
              </div>
            </article>
          ))
        )}
      </div>
    </section>

    <section>
      <h2>フィード一覧</h2>
      <div class="container-list">
        {feeds.length === 0 ? (
          <p class="empty-message">フィードがありません。新規フィードを追加してください。</p>
        ) : (
          feeds.map((feed) => (
            <article class="item-container">
              <div class="item-content">
                <h3 class="item-title">{feed.title}</h3>
                <p class="item-description">{feed.url}</p>
                <div class="item-tags">
                  {getCategoryNames(feed).map((name) => (
                    <span class="tag">{name}</span>
                  ))}
                </div>
              </div>
              <div class="container-meta">
                {feed.lastUpdated && (
                  <span>最終更新: {formatDate(new Date(feed.lastUpdated))}</span>
                )}
              </div>
              <div class="container-actions">
                <button class="edit-feed-btn btn secondary" data-id={feed.id}>編集</button>
                <button class="delete-feed-btn btn danger" data-id={feed.id}>削除</button>
              </div>
            </article>
          ))
        )}
      </div>
    </section>
  </div>

  <!-- フィード追加/編集モーダル -->
  <Modal id="feedModal" title="フィード追加">
    <FeedForm categories={categories} />
  </Modal>

  <!-- カテゴリー追加/編集モーダル -->
  <Modal id="categoryModal" title="カテゴリー追加">
    <CategoryForm />
  </Modal>

  <!-- OPMLインポートモーダル -->
  <Modal id="importModal" title="OPMLインポート">
    <div class="form-container">
      <div class="form-group">
        <label for="opmlFile">OPMLファイル</label>
        <input type="file" id="opmlFile" accept=".opml,.xml" class="form-control" />
      </div>
      <div class="form-actions">
        <button id="cancelImportBtn" class="btn secondary">キャンセル</button>
        <button id="importBtn" class="btn primary">インポート</button>
      </div>
    </div>
  </Modal>
</Layout>

<script>
  import { addFeed, updateFeed, deleteFeed, addCategory, updateCategory, deleteCategory, importFromOPML, exportToOPML } from "~/store/feeds";
  import { $account } from "~/store/accounts";
  
  document.addEventListener('DOMContentLoaded', () => {
    const accountId = $account.get()?.id;
    if (!accountId) return;
    
    // モーダル要素
    const feedModal = document.getElementById('feedModal');
    const categoryModal = document.getElementById('categoryModal');
    const importModal = document.getElementById('importModal');
    
    // フィード追加ボタン
    const addFeedBtn = document.getElementById('addFeedBtn');
    addFeedBtn?.addEventListener('click', () => {
      const modalTitle = feedModal?.querySelector('.modal-header h2');
      if (modalTitle) modalTitle.textContent = 'フィード追加';
      
      // フォームをリセット
      const form = document.getElementById('feedForm') as HTMLFormElement;
      form?.reset();
      
      // モーダルを表示
      feedModal?.classList.add('show');
    });
    
    // フィード編集ボタン
    document.querySelectorAll('.edit-feed-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const feedId = (e.currentTarget as HTMLElement).dataset.id;
        if (!feedId) return;
        
        const modalTitle = feedModal?.querySelector('.modal-header h2');
        if (modalTitle) modalTitle.textContent = 'フィード編集';
        
        // フィードデータを取得
        const feeds = await import('~/store/feeds').then(m => m.$feeds.get());
        const feed = feeds.find(f => f.id === feedId);
        if (!feed) return;
        
        // フォームに値を設定
        const form = document.getElementById('feedForm') as HTMLFormElement;
        if (form) {
          const feedIdInput = form.querySelector('[name="feedId"]') as HTMLInputElement;
          const urlInput = form.querySelector('[name="url"]') as HTMLInputElement;
          const titleInput = form.querySelector('[name="title"]') as HTMLInputElement;
          const descriptionInput = form.querySelector('[name="description"]') as HTMLTextAreaElement;
          
          if (feedIdInput) feedIdInput.value = feed.id;
          if (urlInput) urlInput.value = feed.url;
          if (titleInput) titleInput.value = feed.title;
          if (descriptionInput) descriptionInput.value = feed.description || '';
          
          // カテゴリーのチェックボックスを設定
          feed.categoryIds.forEach(categoryId => {
            const checkbox = form.querySelector(`[name="categoryIds"][value="${categoryId}"]`) as HTMLInputElement;
            if (checkbox) checkbox.checked = true;
          });
        }
        
        // モーダルを表示
        feedModal?.classList.add('show');
      });
    });
    
    // フィード削除ボタン
    document.querySelectorAll('.delete-feed-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const feedId = (e.currentTarget as HTMLElement).dataset.id;
        if (!feedId) return;
        
        if (confirm('このフィードを削除してもよろしいですか？')) {
          deleteFeed(accountId, feedId);
          window.location.reload();
        }
      });
    });
    
    // カテゴリー追加ボタン
    const addCategoryBtn = document.getElementById('addCategoryBtn');
    addCategoryBtn?.addEventListener('click', () => {
      const modalTitle = categoryModal?.querySelector('.modal-header h2');
      if (modalTitle) modalTitle.textContent = 'カテゴリー追加';
      
      // フォームをリセット
      const form = document.getElementById('categoryForm') as HTMLFormElement;
      form?.reset();
      
      // モーダルを表示
      categoryModal?.classList.add('show');
    });
    
    // カテゴリー編集ボタン
    document.querySelectorAll('.edit-category-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const categoryId = (e.currentTarget as HTMLElement).dataset.id;
        if (!categoryId) return;
        
        const modalTitle = categoryModal?.querySelector('.modal-header h2');
        if (modalTitle) modalTitle.textContent = 'カテゴリー編集';
        
        // カテゴリーデータを取得
        const categories = await import('~/store/feeds').then(m => m.$feedCategories.get());
        const category = categories.find(c => c.id === categoryId);
        if (!category) return;
        
        // フォームに値を設定
        const form = document.getElementById('categoryForm') as HTMLFormElement;
        if (form) {
          const categoryIdInput = form.querySelector('[name="categoryId"]') as HTMLInputElement;
          const nameInput = form.querySelector('[name="name"]') as HTMLInputElement;
          
          if (categoryIdInput) categoryIdInput.value = category.id;
          if (nameInput) nameInput.value = category.name;
        }
        
        // モーダルを表示
        categoryModal?.classList.add('show');
      });
    });
    
    // カテゴリー削除ボタン
    document.querySelectorAll('.delete-category-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const categoryId = (e.currentTarget as HTMLElement).dataset.id;
        if (!categoryId) return;
        
        if (confirm('このカテゴリーを削除してもよろしいですか？このカテゴリーに属するフィードからカテゴリーが削除されます。')) {
          deleteCategory(accountId, categoryId);
          window.location.reload();
        }
      });
    });
    
    // OPMLインポートボタン
    const importOpmlBtn = document.getElementById('importOpmlBtn');
    importOpmlBtn?.addEventListener('click', () => {
      importModal?.classList.add('show');
    });
    
    // OPMLエクスポートボタン
    const exportOpmlBtn = document.getElementById('exportOpmlBtn');
    exportOpmlBtn?.addEventListener('click', () => {
      const opml = exportToOPML(accountId);
      
      // ダウンロードリンクを作成
      const blob = new Blob([opml], { type: 'application/xml' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'feeds.opml';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
    
    // インポート実行ボタン
    const importBtn = document.getElementById('importBtn');
    importBtn?.addEventListener('click', () => {
      const fileInput = document.getElementById('opmlFile') as HTMLInputElement;
      const file = fileInput?.files?.[0];
      
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const content = e.target?.result as string;
          if (content) {
            const count = importFromOPML(accountId, content);
            alert(`${count}件のフィードをインポートしました。`);
            importModal?.classList.remove('show');
            window.location.reload();
          }
        };
        reader.readAsText(file);
      } else {
        alert('ファイルを選択してください。');
      }
    });
    
    // インポートキャンセルボタン
    const cancelImportBtn = document.getElementById('cancelImportBtn');
    cancelImportBtn?.addEventListener('click', () => {
      importModal?.classList.remove('show');
    });
    
    // フィードフォーム送信イベント
    document.addEventListener('feed-form-submit', (e: Event) => {
      const customEvent = e as CustomEvent;
      const data = customEvent.detail;
      
      if (data.id) {
        // 既存フィードの更新
        updateFeed(accountId, data.id, {
          title: data.title,
          url: data.url,
          description: data.description,
          categoryIds: data.categoryIds,
        });
      } else {
        // 新規フィード追加
        addFeed(accountId, {
          title: data.title,
          url: data.url,
          description: data.description,
          categoryIds: data.categoryIds,
        });
      }
      
      feedModal?.classList.remove('show');
      window.location.reload();
    });
    
    // カテゴリーフォーム送信イベント
    document.addEventListener('category-form-submit', (e: Event) => {
      const customEvent = e as CustomEvent;
      const data = customEvent.detail;
      
      if (data.id) {
        // 既存カテゴリーの更新
        updateCategory(accountId, data.id, data.name);
      } else {
        // 新規カテゴリー追加
        addCategory(accountId, data.name);
      }
      
      categoryModal?.classList.remove('show');
      window.location.reload();
    });
  });
</script>

<style>
  .container {
    padding: 1rem;
  }
  
  .container-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }
  
  .container-actions {
    display: flex;
    gap: 0.5rem;
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .container-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .container-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .item-container {
    background-color: var(--color-card-background);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .item-content {
    flex: 1;
  }
  
  .item-title {
    margin: 0;
    font-size: 1.2rem;
  }
  
  .item-description {
    margin: 0.5rem 0;
    color: var(--color-text-secondary);
    font-size: 0.9rem;
    word-break: break-all;
  }
  
  .item-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  .tag {
    background-color: var(--color-accent-light);
    color: var(--color-accent);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
  }
  
  .container-meta {
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    margin: 0.5rem 0;
  }
  
  .empty-message {
    color: var(--color-text-secondary);
    font-style: italic;
    text-align: center;
    padding: 2rem;
  }
  
  .form-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .form-control {
    padding: 0.5rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    font-size: 1rem;
  }
  
  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
  }
</style>
