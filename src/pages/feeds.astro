---
import Layout from "~/layouts/Layout.astro";
import { $feeds, $feedCategories, $feedOrder, setFeedStorage } from "../store/feeds";
import { $account } from "../store/accounts";
import Toast from "../components/share/Toast.astro";
---

<Layout title="フィード管理">
  <div class="container">
    <header class="container-header">
      <h1>フィード管理</h1>
      <div class="container-actions">
        <button id="add-feed-btn" class="btn primary">新規フィード追加</button>
        <button id="import-opml-btn" class="btn secondary">OPMLインポート</button>
        <button id="export-opml-btn" class="btn secondary">OPMLエクスポート</button>
        <input type="file" id="opml-file-input" accept=".opml,.xml" style="display: none;" />
      </div>
    </header>

    <!-- 新規フィード追加モーダル -->
    <div id="add-feed-modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>新規フィード追加</h2>
        <form id="add-feed-form">
          <div class="form-group">
            <label for="feed-title">タイトル</label>
            <input type="text" id="feed-title" name="title" required>
          </div>
          <div class="form-group">
            <label for="feed-url">URL</label>
            <input type="url" id="feed-url" name="url" required>
          </div>
          <div class="form-group">
            <label for="feed-category">カテゴリー</label>
            <select id="feed-category" name="category">
              <option value="">カテゴリーを選択</option>
              <!-- カテゴリーはJavaScriptで動的に追加 -->
            </select>
          </div>
          <div class="form-group">
            <label for="new-category">新規カテゴリー</label>
            <input type="text" id="new-category" name="newCategory">
          </div>
          <div class="form-actions">
            <button type="submit" class="btn primary">追加</button>
            <button type="button" class="btn secondary cancel-btn">キャンセル</button>
          </div>
        </form>
      </div>
    </div>

    <!-- カテゴリー編集モーダル -->
    <div id="edit-category-modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>カテゴリー編集</h2>
        <form id="edit-category-form">
          <input type="hidden" id="category-id" name="id">
          <div class="form-group">
            <label for="category-name">カテゴリー名</label>
            <input type="text" id="category-name" name="name" required>
          </div>
          <div class="form-actions">
            <button type="submit" class="btn primary">保存</button>
            <button type="button" class="btn secondary cancel-btn">キャンセル</button>
          </div>
        </form>
      </div>
    </div>

    <!-- フィード編集モーダル -->
    <div id="edit-feed-modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>フィード編集</h2>
        <form id="edit-feed-form">
          <input type="hidden" id="edit-feed-id" name="id">
          <div class="form-group">
            <label for="edit-feed-title">タイトル</label>
            <input type="text" id="edit-feed-title" name="title" required>
          </div>
          <div class="form-group">
            <label for="edit-feed-url">URL</label>
            <input type="url" id="edit-feed-url" name="url" required>
          </div>
          <div class="form-group">
            <label for="edit-feed-category">カテゴリー</label>
            <select id="edit-feed-category" name="category">
              <option value="">カテゴリーを選択</option>
              <!-- カテゴリーはJavaScriptで動的に追加 -->
            </select>
          </div>
          <div class="form-actions">
            <button type="submit" class="btn primary">保存</button>
            <button type="button" class="btn secondary cancel-btn">キャンセル</button>
          </div>
        </form>
      </div>
    </div>

    <section>
      <h2>カテゴリー管理</h2>
      <div id="categories-container" class="container-grid">
        <!-- カテゴリーはJavaScriptで動的に追加 -->
      </div>
    </section>

    <section>
      <h2>フィード一覧</h2>
      <div id="feeds-container" class="container-list sortable">
        <!-- フィードはJavaScriptで動的に追加 -->
      </div>
    </section>
  </div>

  <Toast id="toast" />
</Layout>

<style>
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background-color: var(--color-background);
    margin: 10% auto;
    padding: 20px;
    border-radius: 8px;
    width: 80%;
    max-width: 500px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .close {
    color: var(--color-text-muted);
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
  }

  .form-group input,
  .form-group select {
    width: 100%;
    padding: 8px;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    background-color: var(--color-input-background);
    color: var(--color-text);
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
  }

  .sortable-ghost {
    opacity: 0.5;
    background-color: var(--color-highlight);
  }

  .sortable-handle {
    cursor: grab;
    padding: 0 10px;
    color: var(--color-text-muted);
  }

  .sortable-handle:hover {
    color: var(--color-primary);
  }

  .item-container {
    position: relative;
  }

  .item-container.dragging {
    opacity: 0.5;
  }
</style>

<script>
  import Sortable from 'sortablejs';
  import { $feeds, $feedCategories, $feedOrder, setFeedStorage, addFeed, updateFeed, deleteFeed, addCategory, updateCategory, deleteCategory, updateFeedOrder, importOpml, exportOpml } from "../store/feeds";
  import { $account } from "../store/accounts";

  // アカウント固有のストレージを設定
  const accountId = $account.get()?.id;
  if (accountId) {
    setFeedStorage(accountId);
  }

  // DOM要素
  const addFeedBtn = document.getElementById('add-feed-btn');
  const importOpmlBtn = document.getElementById('import-opml-btn');
  const exportOpmlBtn = document.getElementById('export-opml-btn');
  const opmlFileInput = document.getElementById('opml-file-input');
  const addFeedModal = document.getElementById('add-feed-modal');
  const editCategoryModal = document.getElementById('edit-category-modal');
  const editFeedModal = document.getElementById('edit-feed-modal');
  const categoriesContainer = document.getElementById('categories-container');
  const feedsContainer = document.getElementById('feeds-container');
  const toast = document.getElementById('toast');

  // モーダルを閉じる関数
  function closeModals() {
    addFeedModal.style.display = 'none';
    editCategoryModal.style.display = 'none';
    editFeedModal.style.display = 'none';
  }

  // クローズボタンのイベントリスナー
  document.querySelectorAll('.close, .cancel-btn').forEach(element => {
    element.addEventListener('click', closeModals);
  });

  // モーダル外クリックで閉じる
  window.addEventListener('click', (event) => {
    if (event.target === addFeedModal || event.target === editCategoryModal || event.target === editFeedModal) {
      closeModals();
    }
  });

  // カテゴリーの表示を更新
  function updateCategoriesDisplay() {
    const categories = $feedCategories.get();
    const feeds = $feeds.get();
    
    categoriesContainer.innerHTML = '';
    
    categories.forEach(category => {
      const categoryFeeds = feeds.filter(feed => feed.categoryIds.includes(category.id));
      
      const categoryElement = document.createElement('article');
      categoryElement.className = 'item-container';
      categoryElement.dataset.id = category.id;
      
      categoryElement.innerHTML = `
        <div class="item-header">
          <h3>${category.name}</h3>
          <span class="container-meta">${categoryFeeds.length}フィード</span>
        </div>
        <div class="container-actions">
          <button class="btn secondary edit-category-btn">編集</button>
          <button class="btn secondary delete-category-btn">削除</button>
        </div>
      `;
      
      categoriesContainer.appendChild(categoryElement);
    });
    
    // カテゴリー編集ボタンのイベントリスナー
    document.querySelectorAll('.edit-category-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const categoryId = e.target.closest('.item-container').dataset.id;
        const category = categories.find(c => c.id === categoryId);
        
        if (category) {
          document.getElementById('category-id').value = category.id;
          document.getElementById('category-name').value = category.name;
          editCategoryModal.style.display = 'block';
        }
      });
    });
    
    // カテゴリー削除ボタンのイベントリスナー
    document.querySelectorAll('.delete-category-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const categoryId = e.target.closest('.item-container').dataset.id;
        
        if (confirm('このカテゴリーを削除しますか？所属するフィードからカテゴリーが削除されます。')) {
          deleteCategory(categoryId);
          updateCategoriesDisplay();
          updateFeedsDisplay();
          showToast('カテゴリーを削除しました');
        }
      });
    });
    
    // セレクトボックスのカテゴリーオプションを更新
    updateCategoryOptions();
  }

  // フィードの表示を更新
  function updateFeedsDisplay() {
    const feeds = $feeds.get();
    const categories = $feedCategories.get();
    const feedOrder = $feedOrder.get();
    
    feedsContainer.innerHTML = '';
    
    // フィードを順序に従って表示
    const orderedFeeds = [...feeds].sort((a, b) => {
      const indexA = feedOrder.indexOf(a.id);
      const indexB = feedOrder.indexOf(b.id);
      
      if (indexA === -1) return 1;
      if (indexB === -1) return -1;
      
      return indexA - indexB;
    });
    
    orderedFeeds.forEach(feed => {
      const feedElement = document.createElement('article');
      feedElement.className = 'item-container';
      feedElement.dataset.id = feed.id;
      
      const feedCategories = feed.categoryIds.map(categoryId => {
        const category = categories.find(c => c.id === categoryId);
        return category ? category.name : '';
      }).filter(Boolean);
      
      feedElement.innerHTML = `
        <div class="sortable-handle">
          <i class="fas fa-grip-lines"></i>
        </div>
        <div class="item-content">
          <h3 class="item-title">${feed.title}</h3>
          <p class="item-description">${feed.url}</p>
          ${feedCategories.map(cat => `<span class="tag">${cat}</span>`).join('')}
        </div>
        <div class="container-meta">
          <span>最終更新: ${feed.lastUpdated ? new Date(feed.lastUpdated).toLocaleString() : '未更新'}</span>
        </div>
        <div class="container-actions">
          <button class="btn secondary edit-feed-btn">編集</button>
          <button class="btn danger delete-feed-btn">削除</button>
        </div>
      `;
      
      feedsContainer.appendChild(feedElement);
    });
    
    // フィード編集ボタンのイベントリスナー
    document.querySelectorAll('.edit-feed-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const feedId = e.target.closest('.item-container').dataset.id;
        const feed = feeds.find(f => f.id === feedId);
        
        if (feed) {
          document.getElementById('edit-feed-id').value = feed.id;
          document.getElementById('edit-feed-title').value = feed.title;
          document.getElementById('edit-feed-url').value = feed.url;
          
          const categorySelect = document.getElementById('edit-feed-category');
          categorySelect.value = feed.categoryIds.length > 0 ? feed.categoryIds[0] : '';
          
          editFeedModal.style.display = 'block';
        }
      });
    });
    
    // フィード削除ボタンのイベントリスナー
    document.querySelectorAll('.delete-feed-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const feedId = e.target.closest('.item-container').dataset.id;
        
        if (confirm('このフィードを削除しますか？')) {
          deleteFeed(feedId);
          updateFeedsDisplay();
          updateCategoriesDisplay();
          showToast('フィードを削除しました');
        }
      });
    });
    
    // ドラッグ&ドロップの設定
    initSortable();
  }

  // カテゴリーオプションの更新
  function updateCategoryOptions() {
    const categories = $feedCategories.get();
    const categorySelects = [
      document.getElementById('feed-category'),
      document.getElementById('edit-feed-category')
    ];
    
    categorySelects.forEach(select => {
      if (!select) return;
      
      // 最初のオプション（カテゴリーを選択）以外を削除
      while (select.options.length > 1) {
        select.remove(1);
      }
      
      // カテゴリーオプションを追加
      categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category.id;
        option.textContent = category.name;
        select.appendChild(option);
      });
    });
  }

  // ドラッグ&ドロップの初期化
  function initSortable() {
    if (feedsContainer) {
      Sortable.create(feedsContainer, {
        handle: '.sortable-handle',
        animation: 150,
        ghostClass: 'sortable-ghost',
        onEnd: function(evt) {
          const feedIds = Array.from(feedsContainer.querySelectorAll('.item-container')).map(el => el.dataset.id);
          updateFeedOrder(feedIds);
          showToast('フィードの順序を更新しました');
        }
      });
    }
  }

  // トースト表示
  function showToast(message) {
    if (toast) {
      toast.setAttribute('message', message);
      toast.setAttribute('visible', 'true');
      
      setTimeout(() => {
        toast.removeAttribute('visible');
      }, 3000);
    }
  }

  // 新規フィード追加ボタン
  addFeedBtn.addEventListener('click', () => {
    document.getElementById('add-feed-form').reset();
    addFeedModal.style.display = 'block';
  });

  // 新規フィード追加フォーム送信
  document.getElementById('add-feed-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const title = document.getElementById('feed-title').value;
    const url = document.getElementById('feed-url').value;
    const categoryId = document.getElementById('feed-category').value;
    const newCategory = document.getElementById('new-category').value;
    
    let selectedCategoryId = categoryId;
    
    // 新規カテゴリーが入力されている場合は作成
    if (newCategory && !categoryId) {
      selectedCategoryId = addCategory(newCategory);
      updateCategoriesDisplay();
    }
    
    // フィードを追加
    addFeed({
      title,
      url,
      categoryIds: selectedCategoryId ? [selectedCategoryId] : [],
      lastUpdated: new Date(),
    });
    
    updateFeedsDisplay();
    closeModals();
    showToast('フィードを追加しました');
  });

  // カテゴリー編集フォーム送信
  document.getElementById('edit-category-form').addEventListener('submit', (e) => {
    e.preventDefault();
    
    const id = document.getElementById('category-id').value;
    const name = document.getElementById('category-name').value;
    
    updateCategory(id, name);
    updateCategoriesDisplay();
    updateFeedsDisplay();
    closeModals();
    showToast('カテゴリーを更新しました');
  });

  // フィード編集フォーム送信
  document.getElementById('edit-feed-form').addEventListener('submit', (e) => {
    e.preventDefault();
    
    const id = document.getElementById('edit-feed-id').value;
    const title = document.getElementById('edit-feed-title').value;
    const url = document.getElementById('edit-feed-url').value;
    const categoryId = document.getElementById('edit-feed-category').value;
    
    updateFeed(id, {
      title,
      url,
      categoryIds: categoryId ? [categoryId] : [],
      lastUpdated: new Date(),
    });
    
    updateFeedsDisplay();
    updateCategoriesDisplay();
    closeModals();
    showToast('フィードを更新しました');
  });

  // OPMLインポートボタン
  importOpmlBtn.addEventListener('click', () => {
    opmlFileInput.click();
  });

  // OPMLファイル選択
  opmlFileInput.addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = async (event) => {
      try {
        const content = event.target.result;
        const result = await importOpml(content);
        
        updateCategoriesDisplay();
        updateFeedsDisplay();
        
        showToast(`${result.addedFeeds}件のフィードをインポートしました${result.errors.length > 0 ? `（${result.errors.length}件のエラー）` : ''}`);
        
        // エラーがある場合はコンソールに出力
        if (result.errors.length > 0) {
          console.error('インポートエラー:', result.errors);
        }
      } catch (error) {
        showToast('インポートに失敗しました');
        console.error('インポートエラー:', error);
      }
      
      // ファイル選択をリセット
      e.target.value = '';
    };
    
    reader.readAsText(file);
  });

  // OPMLエクスポートボタン
  exportOpmlBtn.addEventListener('click', () => {
    try {
      const opmlContent = exportOpml();
      
      // ダウンロードリンクを作成
      const blob = new Blob([opmlContent], { type: 'text/xml' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `rss-feeds-${new Date().toISOString().slice(0, 10)}.opml`;
      document.body.appendChild(a);
      a.click();
      
      // クリーンアップ
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);
      
      showToast('フィードをエクスポートしました');
    } catch (error) {
      showToast('エクスポートに失敗しました');
      console.error('エクスポートエラー:', error);
    }
  });

  // 初期表示
  updateCategoriesDisplay();
  updateFeedsDisplay();
</script>
