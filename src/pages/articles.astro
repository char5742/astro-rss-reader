---
export const prerender = false;
import { getCollection } from "astro:content";
import Layout from "~/layouts/Layout.astro";
import { ArticleStatus } from "~/types/article";

const filter = Astro.url.searchParams.get("filter");
const feeds = await getCollection("feed");

const articles = feeds
  .flatMap((feed) => feed.data.articles)
  .sort((a, b) => (a.publishedAt < b.publishedAt ? 1 : -1))
  .filter((article) => {
    if (filter === "today") {
      return article.publishedAt.toDateString() === new Date().toDateString();
    } else if (filter === "unread") {
      return article.status === ArticleStatus.UNREAD;
    } else {
      return true;
    }
  });
---

<Layout title="記事一覧">
  <main>
    <div class="articles-grid">
      {
        articles.map((article) => (
          <article
            class={`border-card ${article.status === ArticleStatus.UNREAD ? "unread" : ""}`}
          >
            <header>
              <h2>
                <a href={article.url}>{article.title}</a>
              </h2>
              <time datetime={article.publishedAt.toISOString()}>
                {article.publishedAt.toLocaleDateString()}
              </time>
            </header>
            <p>{article.summary}</p>
            <footer>
              <ul class="category-list">
                {article.categories.map((category) => (
                  <li class="category-item rounded-card">{category.name}</li>
                ))}
              </ul>
            </footer>
          </article>
        ))
      }
    </div>
  </main>
</Layout>

<style>
  main {
    padding: var(--spacing-lg);

    h1 {
      margin-block-end: var(--spacing-xl);
      font-size: var(--font-size-2xl);
      font-weight: var(--font-weight-bold);
    }
  }

  .articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 30ch), 1fr));
    gap: var(--spacing-xl);
  }

  article {
    &:not(.unread) {
      background: var(--color-surface-disabled);
    }

    p {
      color: var(--color-text);
      margin-block-end: var(--spacing-md);
      line-height: var(--line-height-relaxed);
    }
  }

  header {
    margin-block-end: var(--spacing-sm);

    h2 {
      font-size: var(--font-size-lg);
      margin-block-end: var(--spacing-xs);

      a {
        color: var(--color-text);
        text-decoration: none;

        &:hover {
          color: var(--color-primary);
        }
      }
    }

    time {
      color: var(--color-text-muted);
      font-size: var(--font-size-sm);
    }
  }

  footer {
    display: flex;
    justify-content: spacing-between;
    align-items: center;
    gap: var(--spacing-md);
  }

  .category-list {
    display: flex;
    gap: var(--spacing-xs);
    list-style: none;
    padding: 0;
  }

  .category-item {
    background: var(--color-surface-accent);
    padding: var(--spacing-xs) var(--spacing-sm);
    font-size: var(--font-size-sm);
    color: var(--color-text-on-accent);
  }

  .status-badge {
    color: var(--color-surface-tertiary);
    font-size: var(--font-size-lg);
  }
</style>
