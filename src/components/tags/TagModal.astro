---
import TagSelector from "./TagSelector.astro";

type Props = {
  articleId: string;
};

const { articleId } = Astro.props;
---

<div class="tag-modal" id="tagModal">
  <div class="tag-modal-content">
    <header class="tag-modal-header">
      <h2>タグを管理</h2>
      <button class="close-btn" aria-label="閉じる">×</button>
    </header>
    
    <div class="tag-modal-body">
      <p>記事に付けるタグを選択または作成してください。</p>
      <TagSelector articleId={articleId} allowCreate={true} />
    </div>
    
    <footer class="tag-modal-footer">
      <button class="done-btn">完了</button>
    </footer>
  </div>
</div>

<script is:inline>
  // DOMが読み込まれた後に実行
  document.addEventListener("DOMContentLoaded", function() {
    const modal = document.getElementById("tagModal");
    if (!modal) return;
    
    const closeBtn = modal.querySelector(".close-btn");
    const doneBtn = modal.querySelector(".done-btn");
    
    // モーダルを閉じる関数
    function closeModal() {
      modal.classList.remove("active");
      document.body.classList.remove("modal-open");
    }
    
    // 閉じるボタンのイベント
    if (closeBtn) {
      closeBtn.addEventListener("click", closeModal);
    }
    
    // 完了ボタンのイベント
    if (doneBtn) {
      doneBtn.addEventListener("click", closeModal);
    }
    
    // モーダル外クリックで閉じる
    modal.addEventListener("click", function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // ESCキーで閉じる
    document.addEventListener("keydown", function(e) {
      if (e.key === "Escape" && modal.classList.contains("active")) {
        closeModal();
      }
    });
    
    // モーダルを開く関数をグローバルに公開
    window.openTagModal = function() {
      modal.classList.add("active");
      document.body.classList.add("modal-open");
    };
  });
</script>

<style>
  .tag-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }
  
  .tag-modal.active {
    opacity: 1;
    visibility: visible;
  }
  
  .tag-modal-content {
    background-color: var(--bg-color);
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  .tag-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-md);
    border-bottom: 1px solid var(--border-color);
  }
  
  .tag-modal-header h2 {
    margin: 0;
    font-size: 1.25rem;
  }
  
  .close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-color);
    opacity: 0.7;
    transition: opacity 0.2s ease;
  }
  
  .close-btn:hover {
    opacity: 1;
  }
  
  .tag-modal-body {
    padding: var(--space-md);
  }
  
  .tag-modal-footer {
    padding: var(--space-md);
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
  }
  
  .done-btn {
    padding: var(--space-xs) var(--space-md);
    background-color: var(--accent);
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .done-btn:hover {
    background-color: var(--accent-dark, var(--accent));
  }
  
  /* モーダルオープン時のボディスタイル */
  :global(body.modal-open) {
    overflow: hidden;
  }
</style>
