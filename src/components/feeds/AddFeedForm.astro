---
import { Icon } from "astro-icon/components";

interface Props {
  categories?: string[];
}

const { categories = ["テクノロジー", "ニュース", "エンタメ"] } = Astro.props;
---

<div class="add-feed-form-container">
  <button id="show-add-feed-form" class="btn primary">
    <Icon name="plus" /> 新規フィード追加
  </button>

  <div id="add-feed-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>新規フィード追加</h2>
        <button id="close-modal" class="close-button">×</button>
      </div>
      
      <form id="add-feed-form">
        <div class="form-group">
          <label for="feed-url">フィードURL <span class="required">*</span></label>
          <input 
            type="url" 
            id="feed-url" 
            name="url" 
            placeholder="https://example.com/feed.xml" 
            required
          />
          <p class="help-text">RSSまたはAtomフィードのURLを入力してください</p>
        </div>

        <div class="form-group">
          <label for="feed-title">タイトル</label>
          <input 
            type="text" 
            id="feed-title" 
            name="title" 
            placeholder="自動取得されます"
          />
          <p class="help-text">空欄の場合、フィードから自動取得します</p>
        </div>

        <div class="form-group">
          <label for="feed-category">カテゴリー</label>
          <select id="feed-category" name="category" multiple>
            {categories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
          <p class="help-text">複数選択可能です（Ctrlキーを押しながら選択）</p>
        </div>

        <div class="form-actions">
          <button type="button" id="validate-feed" class="btn secondary">URLを検証</button>
          <button type="submit" id="submit-feed" class="btn primary" disabled>追加</button>
        </div>
      </form>

      <div id="validation-result" class="validation-result hidden">
        <div id="validation-success" class="validation-success hidden">
          <h3>フィード情報</h3>
          <div id="feed-preview">
            <p><strong>タイトル:</strong> <span id="preview-title"></span></p>
            <p><strong>説明:</strong> <span id="preview-description"></span></p>
            <div id="preview-image-container" class="hidden">
              <img id="preview-image" src="" alt="フィードアイコン" />
            </div>
          </div>
        </div>
        <div id="validation-error" class="validation-error hidden">
          <p>エラー: <span id="error-message"></span></p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .add-feed-form-container {
    margin-bottom: var(--spacing-lg);
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  .modal-content {
    background-color: var(--background);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-lg);
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
  }

  .close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-secondary);
  }

  .form-group {
    margin-bottom: var(--spacing-md);
  }

  label {
    display: block;
    margin-bottom: var(--spacing-sm);
    font-weight: 500;
  }

  .required {
    color: var(--error);
  }

  input, select {
    width: 100%;
    padding: var(--spacing-sm);
    border: 1px solid var(--border);
    border-radius: var(--border-radius-sm);
    background-color: var(--input-background);
    color: var(--text-primary);
  }

  .help-text {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    margin-top: var(--spacing-xs);
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: var(--spacing-md);
    margin-top: var(--spacing-lg);
  }

  .validation-result {
    margin-top: var(--spacing-lg);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-sm);
  }

  .validation-success {
    background-color: var(--success-bg);
    color: var(--success);
  }

  .validation-error {
    background-color: var(--error-bg);
    color: var(--error);
  }

  .hidden {
    display: none;
  }

  #preview-image {
    max-width: 100px;
    max-height: 100px;
    margin-top: var(--spacing-sm);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const showFormButton = document.getElementById('show-add-feed-form');
    const modal = document.getElementById('add-feed-modal');
    const closeButton = document.getElementById('close-modal');
    const validateButton = document.getElementById('validate-feed') as HTMLButtonElement;
    const submitButton = document.getElementById('submit-feed') as HTMLButtonElement;
    const form = document.getElementById('add-feed-form') as HTMLFormElement;
    
    const urlInput = document.getElementById('feed-url') as HTMLInputElement;
    const titleInput = document.getElementById('feed-title') as HTMLInputElement;
    
    const validationResult = document.getElementById('validation-result');
    const validationSuccess = document.getElementById('validation-success');
    const validationError = document.getElementById('validation-error');
    const errorMessage = document.getElementById('error-message');
    
    const previewTitle = document.getElementById('preview-title');
    const previewDescription = document.getElementById('preview-description');
    const previewImageContainer = document.getElementById('preview-image-container');
    const previewImage = document.getElementById('preview-image') as HTMLImageElement;

    // モーダルを表示
    showFormButton?.addEventListener('click', () => {
      if (modal) {
        modal.style.display = 'flex';
      }
    });

    // モーダルを閉じる
    closeButton?.addEventListener('click', () => {
      if (modal) {
        modal.style.display = 'none';
      }
    });

    // モーダル外クリックで閉じる
    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        if (modal) {
          modal.style.display = 'none';
        }
      }
    });

    // フィードURLの検証
    validateButton?.addEventListener('click', async () => {
      const url = urlInput?.value.trim();
      
      if (!url) {
        showError('URLを入力してください');
        return;
      }

      try {
        // 検証中の表示
        validateButton.textContent = '検証中...';
        validateButton.disabled = true;
        
        // バリデーション結果をリセット
        hideValidationResults();

        // フィードURLを検証
        const response = await fetch(`/api/feeds/validate?url=${encodeURIComponent(url)}`);
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || 'フィードの検証に失敗しました');
        }

        // 成功した場合
        if (previewTitle) previewTitle.textContent = data.title || 'タイトルなし';
        if (previewDescription) previewDescription.textContent = data.description || '説明なし';
        
        // 画像がある場合は表示
        if (data.imageUrl && previewImage && previewImageContainer) {
          previewImage.src = data.imageUrl;
          previewImageContainer.classList.remove('hidden');
        } else if (previewImageContainer) {
          previewImageContainer.classList.add('hidden');
        }

        // タイトルが空の場合は自動入力
        if (!titleInput.value && data.title) {
          titleInput.value = data.title;
        }

        // 検証成功表示
        if (validationSuccess) validationSuccess.classList.remove('hidden');
        if (validationResult) validationResult.classList.remove('hidden');
        
        // 追加ボタンを有効化
        if (submitButton) submitButton.disabled = false;
      } catch (error) {
        // エラーメッセージを表示
        showError(error instanceof Error ? error.message : '不明なエラーが発生しました');
      } finally {
        // ボタンを元に戻す
        if (validateButton) {
          validateButton.textContent = 'URLを検証';
          validateButton.disabled = false;
        }
      }
    });

    // フォーム送信
    form?.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      const formData = new FormData(form);
      
      try {
        submitButton.disabled = true;
        submitButton.textContent = '追加中...';
        
        const response = await fetch('/api/feeds', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (!response.ok) {
          throw new Error(result.message || 'フィードの追加に失敗しました');
        }
        
        // 成功したらモーダルを閉じてページをリロード
        if (modal) {
          modal.style.display = 'none';
        }
        
        window.location.reload();
      } catch (error) {
        showError(error instanceof Error ? error.message : '不明なエラーが発生しました');
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = '追加';
        }
      }
    });

    // エラーメッセージを表示
    function showError(message: string) {
      if (errorMessage) errorMessage.textContent = message;
      if (validationError) validationError.classList.remove('hidden');
      if (validationResult) validationResult.classList.remove('hidden');
      if (validationSuccess) validationSuccess.classList.add('hidden');
    }

    // バリデーション結果を非表示
    function hideValidationResults() {
      if (validationResult) validationResult.classList.add('hidden');
      if (validationSuccess) validationSuccess.classList.add('hidden');
      if (validationError) validationError.classList.add('hidden');
    }
  });
</script>
