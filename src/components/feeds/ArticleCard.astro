---
import { $articleStatusBy } from "~/store/articles";
import type { Article } from "~/types/article";
import { ArticleStatus } from "~/types/article";

interface Props {
  article: Article;
}

const { article } = Astro.props;
const status = $articleStatusBy(article.id).get();
---

<article
  class:list={["hover-card", { unread: status === ArticleStatus.UNREAD }]}
  data-status={status}
  data-id={article.id}
  data-title={article.title.toLowerCase()}
  data-summary={article.summary?.toLowerCase()}
>
  <header>
    <h2>
      <span class="badge">●</span>
      <a
        href={article.url}
        target="_blank"
        rel="noopener"
        data-article-id={article.id}>{article.title}</a
      >
    </h2>
    <time datetime={article.publishedAt.toISOString()}>
      {article.publishedAt.toLocaleDateString()}
    </time>
  </header>

  {
    article.imageUrl && (
      <div class="image-container">
        <img src={article.imageUrl} alt="" loading="lazy" />
      </div>
    )
  }

  <p class="summary">{article.summary}</p>

  <footer>
    <ul class="categories">
      {
        article.categories.map((category) => (
          <li class="category">{category.name}</li>
        ))
      }
    </ul>

    <div class="actions">
      <button class="btn summary-btn" data-article-id={article.id}>
        要約
      </button>
    </div>
  </footer>
</article>

<style>
  article {
    &.unread {
      border-left: 3px solid var(--color-primary);
    }

    &:not(.unread) {
      background: var(--color-surface-disabled);
    }
  }

  .unread {
    .badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
  }

  .badge {
    display: none;
  }

  .image-container {
    margin-bottom: var(--spacing-sm);

    img {
      width: 100%;
      height: 150px;
      object-fit: cover;
      border-radius: var(--spacing-xs);
    }
  }

  .summary {
    color: var(--color-text);
    margin-block-end: var(--spacing-md);
    line-height: var(--line-height-relaxed);
    flex-grow: 1;
  }

  header {
    margin-block-end: var(--spacing-sm);

    h2 {
      font-size: var(--font-size-lg);
      margin-block-end: var(--spacing-xs);
      display: flex;
      align-items: center;
      gap: var(--spacing-xs);

      a {
        color: var(--color-text);
        text-decoration: none;

        &:hover {
          color: var(--color-primary);
        }
      }
    }

    time {
      color: var(--color-text-muted);
      font-size: var(--font-size-sm);
      display: block;
    }
  }

  footer {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    margin-top: auto;
  }

  .categories {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .category {
    background: var(--color-surface-accent);
    padding: var(--spacing-xs) var(--spacing-sm);
    font-size: var(--font-size-sm);
    color: var(--color-text-on-accent);
    border-radius: var(--spacing-xs);
  }

  .actions {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-xs);
  }

  .btn {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--spacing-xs);
    font-size: var(--font-size-sm);
    color: var(--color-text);
    cursor: pointer;
    transition: all 0.2s ease;

    &:hover {
      background: var(--color-surface-hover);
    }

    &:active {
      transform: scale(0.98);
    }

    &.summary-btn {
      background-color: var(--color-surface-accent);
      color: var(--color-text-on-accent);

      &:hover {
        background-color: var(--color-surface-accent-hover);
      }
    }
  }

  @media (max-width: 480px) {
    .actions {
      justify-content: center;

      .btn {
        text-align: center;
        min-width: 120px;
        padding: var(--spacing-xs) var(--spacing-sm);
      }
    }
  }
</style>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";
  import { ArticleStatus } from "~/types/article";
  document.addEventListener("astro:page-load", () => {
    // リンクが開かれたら既読にする
    document.querySelectorAll("article a").forEach((link) => {
      link.addEventListener("click", (e) => {
        if (!(e.target instanceof HTMLAnchorElement)) {
          return;
        }
        const articleId = e.target?.dataset.articleId;
        if (articleId) {
          actions.articles.updateArticleStatus({
            articleId,
            status: ArticleStatus.READ,
          });
          navigate("");
        }
      });
    });
  });
</script>
