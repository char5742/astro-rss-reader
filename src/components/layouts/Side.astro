---
import EditIcon from "~/icons/edit.svg";
import SearchIcon from "~/icons/search.svg";
import SettingsIcon from "~/icons/settings.svg";
import { $articleStatusBy, articlesByFeedId } from "~/store/articles";
import { $feeds } from "~/store/feeds";
import BadgedItem from "./BadgedItem.astro";
import LogoutButton from "./LogoutButton.astro";

const feedList = $feeds.get();
const unreadCountToday = await Promise.all(feedList
  .flatMap((feed) => articlesByFeedId(feed.id).then(
    (articles) => (articles ?? []).filter(
      (article) =>
        article.publishedAt.toDateString() === new Date().toDateString(),
    ).filter(
      (article) => $articleStatusBy(article.id).get() === "unread",
    )
  ))).then((articles) =>
  articles.flat().length);

const unreadCountAll = await Promise.all(feedList
  .flatMap((feed) => articlesByFeedId(feed.id).then(
    (articles) => (articles ?? []).filter(
      (article) => $articleStatusBy(article.id).get() === "unread",
    )
  ))).then((articles) =>
  articles.flat().length);

---

<aside>
  <header>
    <nav>
      <h2><a href="/" aria-label="home">RSS Reader</a></h2>
      <ul role="list">
        <li>
          <a href="/settings" aria-label="settings" class="hover-card">
            <SettingsIcon  fill="currentColor"/>
          </a>
        </li>
        <li>
          <a href="/search" aria-label="search" class="hover-card">
            <SearchIcon fill="currentColor" />
          </a>
        </li>
        <li>
          <a href="/feeds" aria-label="edit" class="hover-card">
            <EditIcon fill="currentColor" />
          </a>
        </li>
      </ul>
    </nav>
  </header>
  <hr />

  <section>
    <h2>Latest</h2>
    <ul role="list">
      <li>
        <BadgedItem
          title="Today"
          link="/articles?filter=today"
          unreadCount={unreadCountToday}
        />
      </li>
      <li>
        <BadgedItem
          title="Unread"
          link="/articles?filter=unread"
          unreadCount={unreadCountAll}
        />
      </li>
    </ul>
  </section>
  <section class="feed-section">
    <h2>Feeds</h2>
    <ul role="list">
      {
        feedList.map(async (feed) => (
          <li>
            <BadgedItem
              title={feed.title}
              link={`/feeds/${feed.id}`}
              unreadCount={
                await articlesByFeedId(feed.id).then(
                  (articles) => (articles ?? []).filter(
                    (article) => $articleStatusBy(article.id).get() === "unread",
                  ).length,
                )
              }
            />
          </li>
        ))
      }
    </ul>
  </section>
  <footer>
    <LogoutButton />
  </footer>
</aside>

<style>
  aside {
    display: grid;
    grid-template-rows: auto auto auto 1fr auto;
    background-color: var(--color-gray-100);
    border-right: 1px solid var(--color-gray-200);
    padding: var(--spacing-md);
  }

  nav {
    h2 {
      a {
        text-decoration: none;
      }
    }
    ul {
      display: flex;
      flex-direction: row;
      justify-content: space-between;

      a {
        font-size: var(--font-size-3xl);
        color : var(--color-text-primary);
      }
    }
  }

  section {
    h2 {
      font-size: var(--font-size-xs);
      margin-bottom: var(--spacing-md);
    }
    li {
      a {
        display: block;
        text-decoration: none;
      }
    }
  }

  footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-md);
  }
</style>
